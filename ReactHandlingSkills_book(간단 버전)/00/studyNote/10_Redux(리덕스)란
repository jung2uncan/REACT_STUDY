* 리덕스에서 사용되는 키워드
    1. 액션(Action)
     : 상태에 어떠한 변화가 필요하게 될 땐, 액션이라는 것을 발생시킴. 이는 하나의 객체로 표현됨.

     ₩₩₩
        // 형식 (type 필수, 이 외는 개발자 마음대로)
        {
            type: "TOGGLE_VALUE",
            data: {
                id: 0,
                text: "리덕스 배우기"
            }
        }
     ₩₩₩

    2. 액션 생성함수 (Action Creator)
     : 액션을 만드는 함수. 단순히 파라미터를 받아와서 액션 객체 형태를 만듬.
      액션 생성함수를 만들어서 사용하는 이유는 나중에 컴포넌트에서 더욱 쉽게 액션을 발생시키기 위함

    ₩₩₩
        //2가지 작성 형태
        export function addTodo(data) {
            return {
                type: "ADD_TODO",
                data
            };
        }

        // 화살표 함수로도 만들 수 있음
        export const changeInput = text => ({ 
            type: "CHANGE_INPUT",
            text
        });
    ₩₩₩

    3. 리듀서(Reducer)
     : 변화를 일으키는 함수. 2가지 파라미터를 받아옴.
      현재의 상태와, 전달 받은 액션을 참고하여 새로운 상태를 만들어서 반환함.

    ₩₩₩
          switch (action.type) {
            case 'INCREASE':
                return state + 1;
            case 'DECREASE':
                return state - 1;
            default:
                return state;
        }
    ₩₩₩


    4. 스토어(Store)
     : 리덕스는 한 어플리케이션 당 하나의 스토어를 만듬. 스토어 안에는 현재의 앱 상태와, 리듀서가 들어가있고 추가적으로 몇 가지 내장 함수들이 있음.

    5. 디스패치(Dispatch)
     : 스토어의 내장함수 중 하나. 디스패치는 액션을 발생시키는 것이라고 이해하면 됨. dispatch라는 함수에 액션을 파라미터로 전달함.
      그렇게 호출을 하면, 스토어는 리듀서 함수를 실행시켜서 해당 액션을 처리하는 로직이 있다면 액션을 참고하여 새로운 상태를 만들어 줌.

    6. 구독(Subscribe)
     : 스토어의 내장함수 중 하나. 구독함수는 함수 형태의 값을 파라미터로 받아옴. subscribe 함수에 특정 함수를 전달해주면, 액션이 디스패치 되었을 때 마다 전달해준 함수가 호출함.


* 리덕스의 3가지 규칙

    1. 하나의 어플리케이션 안에는 하나의 스토어가 있음
    2. 상태는 읽기 전용 - 원본(기존의 상태)은 건들이지 않고, 새로운 상태를 생성하여 업데이트 해주는 방식을 사용해야 함.
    3. 변화를 일으키는 함수, 리듀서는 순수한 함수여야 함.
     - 리듀서 함수는 이전 상태와 액션 객체를 파라미터로 받음.
     - 이전의 상태는 절대로 건드리지 않고, 변화를 일으킨 새로운 상태 객체를 만들어서 반환함.
     - 똑같은 파라미터로 호출된 리듀서 함수는 "언제나" 똑같은 결과값을 반환해야만 함. (동일한 인풋 => 동일한 아웃풋)