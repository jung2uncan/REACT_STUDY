- props를 통해 컨포넌트에게 값 전달하기

* props란?
  : properties의 약자로, 어떠한 값을 컴포넌트에세 전달해줘야할 때 사용함.

  예)

  - App.js
    function App() {
        return <Hello name="react" />;
    }

  - Hello.js
    function Hello(props) {
    return <div>안녕하세요 {props.name}</div>;
    }

컴포넌트에게 전달되는 props는 파라미터를 통하여 조회할 수 있음. props는 객체 형태로 전달되며, 값을 받은 컴포넌트에서 조회시 props.name과 같이 조회할 수 있음.


* props.children?
    : 컴포넌트 태그 사이에 넣은 값을 조회하고 싶을 때 사용.

    예) 
    - App.js
    function App() {
        return (
            <Wrapper>
                <Hello name="react" />
            </Wrapper>
        );
    }

    - Wrapper.js
    function Wrapper({ children }) {
        const style = {
            border: "2px solid black",
            padding: "16px",
        };

        return <div style={style}>{children}</div>;
    }


* 조건부 렌더링?
    : 특정 조건에 따라 다른 결과물을 렌더링 하는 것.
    참고로 JSX 에서 null, false, undefined 를 렌더링하게 된다면 아무것도 나타나지 않음.
    props의 값을 설정하게 될 때 props 이름만 작성하고, 값 설정을 생략한다면 기본 값은 "true".

    * 단축 평가 논리 계산법!
        : A && B 일 때, A값이 true면 B값 반환, A값이 False면 A값 반환
        
        console.log(true && 'hello'); // hello
        console.log(false && 'hello'); // false
        console.log('hello' && 'bye'); // bye
        console.log(null && 'hello'); // null
        console.log(undefined && 'hello'); // undefined
        console.log('' && 'hello'); // ''
        console.log(0 && 'hello'); // 0
        console.log(1 && 'hello'); // hello
        console.log(1 && 1); // 1