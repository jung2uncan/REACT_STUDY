* LifeCycle Method (생명주기 메서드)
 :  생명주기 메서드는 컴포넌트가 브라우저상에 나타나고, 업데이트되고, 사라지게 될 때 호출되는 메서드

 생명주기 메서드는 클래스형 컴포넌트에서만 사용할 수 있음.

===================================================================================
<마운트>
마운트될 때 발생하는 생명주기 메소드
- constructor
- getDerivedStateFromProps
- render
- componentDidMount

1) constructor
 : constructor 는 컴포넌트의 생성자 메서드. 컴포넌트가 만들어지면 가장 먼저 실행되는 메서드.

```
Ex)
    constructor(props) {
    super(props);
    console.log("constructor");
  }
```

2) getDerivedStateFromProps
 : getDerivedStateFromProps는 props로 받아온 것을 state에 넣어주고 싶을 때 사용함.
   컴포넌트가 처음 렌더링 되기 전에도 호출 되고, 그 이후 리렌더링 되기 전에도 매번 실행됨.

```
Ex)
  //다른 생명주기 메서드와는 달리 앞에 static 을 필요로 하고, 이 안에서는 'this'를 조회할 수 없음.
  //여기서 특정 객체를 반환하게 되면 해당 객체 안에 있는 내용들이 컴포넌트의 'state'로 설정되며, 'null'을 반환하게되면 아무 일도 발생하지 않음.
  static getDerivedStateFromProps(nextProps, prevState) {
    console.log("getDerivedStateFromProps");
    if (nextProps.color !== prevState.color) {
      return { color: nextProps.color };
    }
    return null;
  }
```

3) render
 : 컴포넌트를 렌더링 하는 메서드

4) componentDidMount
 : 컴포넌트의 첫번째 렌더링이 마치고 나면 호출되는 메서드. 이 메소드가 호출되는 시점에는 사용자가 만든 컴포넌트가 화면에 나타난 상태.
   주로 D3, masonry 처럼 DOM 을 사용해야하는 외부 라이브러리 연동을 하거나, 해당 컴포넌트에서 필요로하는 데이터를 요청하기 위해 axios, fetch 등을 통하여 ajax 요청을 하거나, DOM 의 속성을 읽거나 직접 변경하는 작업을 진행함.

===================================================================================

<업데이트>
업데이트될 때 발생하는 생명주기 메소드
- getDerivedStateFromProps
- shouldComponentUpdate
- render
- getSnapshotBeforeUpdate
- componentDidUpdate

1) getDerivedStateFromProps
 : 컴포넌트의 props 나 state 가 바뀌었을때도 이 메서드가 호출됨.

2) shouldComponentUpdate
 : shouldComponentUpdate 메서드는 컴포넌트가 리렌더링 할지 말지를 결정하는 메서드
   주로, 최적화할 때 사용하는 메서드이며, React.memo()의 역할과 비슷함.

```
Ex)
 shouldComponentUpdate(nextProps, nextState) {
    console.log("shouldComponentUpdate", nextProps, nextState);
    // 숫자의 마지막 자리가 4면 리렌더링하지 않음
    return nextState.number % 10 !== 4;
  }
```

3) render
 : 컴포넌트를 렌더링 하는 메서드

4) getSnapshotBeforeUpdate
 : getSnapshotBeforeUpdate는 컴포넌트에 '변화가 일어나기 직전의 DOM 상태를 가져와서 특정 값을 반환'하면, 
   그 다음 발생하게 되는 'componentDidUpdate 함수에서 받아와서 사용을 할 수 있음'.

```
Ex)
  getSnapshotBeforeUpdate(prevProps, prevState) {
    console.log("getSnapshotBeforeUpdate");
    if (prevProps.color !== this.props.color) {
      return this.myRef.style.color;
    }
    return null;
  }
```

5) componentDidUpdate
 : componentDidUpdate는 리렌더링이 마치고, 화면에 우리가 원하는 변화가 모두 반영되고 난 뒤 호출되는 메서드.
   3번째 파라미터로 getSnapshotBeforeUpdate 에서 반환한 값을 조회 할 수 있음.

```
Ex)
  componentDidUpdate(prevProps, prevState, snapshot) {
    console.log("componentDidUpdate", prevProps, prevState);
    if (snapshot) {
      console.log("업데이트 되기 직전 색상: ", snapshot);
    }
  }
```

===================================================================================

<언마운트>
 : 컴포넌트가 화면에서 사라지는 것을 의미함.

- componentWillUnmount

1) componentWillUnmount
 : 컴포넌트가 화면에서 사라지기 직전에 호출됨.

 ```
 Ex)
  //주로 DOM에 직접 등록했었던 이벤트를 제거하고, 만약에 setTimeout 을 걸은것이 있다면 clearTimeout 을 통하여 제거함.
  //추가로, 외부 라이브러리를 사용한게 있고 해당 라이브러리에 dipose기능이 있으면, 여기에서 호출하면 됨.
  componentWillUnmount() {
    console.log("componentWillUnmount");
  }
 ```

 