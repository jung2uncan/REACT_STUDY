React의 LifeCycle

# 컴포넌트가 로딩되기 시작하는 Mounting
1) constructor 클래스 생성자
2) 실제 로딩이 이루어지는 render
- constructor메소드가 실행된 이후에 render 메소드가 실행됨. render메소드가 실행되면서 JSX가 HTML로 변환되어 웹 브라우저에 나타나게 됨.
- render메소드는 컴포넌트가 로딩될 때에도 실행되지만 컴포넌트의 데이터(state, props)가 업테이트 되었을 때에도 동작함. 
  따라서, render 메소드레서는 setState나 props를 변화시키는 메소드를 가능하면 수행하지 말아야 함.(잘못하면 무한루프가 발생)
3) 처음 로딩이 끝난 뒤에 수행되는 componentDidMount
- Mounting의 마지막 부분. render 메소드에 있는 모든 부분들이 브라우저에 나타나게 되었을 때만 실행되는 메소드.
- 컴포넌트의 데이터가 업데이트 되어도 이 메소드는 다시 수행되지 않음. (오직, 초기 컴포넌트의 로딩이후에 한 번만 실행되는 라이프사리클 메소드)

# 컴포넌트의 업데이트 Updating
: 리액트는 컴포넌트의 업데이트 감지를 오직 현재 컴포넌트에서 state나 props의 변경 유무로만 판단함.
1) state, props의 변경
 - forceUpdate 라는 메소드는 강제로 재 렌더링 하게 끔 도와주는 메소드.
 만약, setState를 이용해서 state를 하나 업데이트 한다면?
  (1) render
        : state의 변경이 일어났으므로, 이를 감지라여 다시 변경된 부분을 그려준다.
  (2) componentDidMount
        : 컴포넌트의 변경이 완료된 이후에 수행되는 메소드. render메소드가 실행되어 업데이트 된 state, props와 업데이트 되기 전인 state, props를 가지고 비교 작업을 가능하게 함.

# 컴포넌트의 삭제 Unmounting
1) componentWillUnmount
- 컴포넌트가 사라질 때 수행되는 메소드. 컴포넌트 내에 할당해 놓았던 여러가지 변수들을 해제시켜줄 수 있음. (setInterval, enventListener 등)


------------------------------------------------------------------------------------------------------------------
# render
: render메소드를 작성한 JSX를 HTML로 변환해 실제 브라우저에 렌더링 하는 작업을 함. 아래 2가지 기능을 살펴보자.
1) JSX를 렌더링 하는 것
- render 메소드를 통해서 작성한 JSX들을 렌더링.
2) setState를 하지 않고 데이터를 가공해 보여주는 것
- 받는 데이터를 원하는 형태로 재조합(재가공)할 수 있음.

 * Render메소드 안에서 Dom 요소 컨트롤을 불가함!
    : render메소드는 JSX를 HTML로 변환해 브라우저에 붙이는 과정을 수행하기 때문에 당연히 DOM요소를 직접 getElementById같은 키워드로 가져와 데이터를 추가하거나 값을 변경하는 등의 행동은 불가능.

# componentDidMount
: 컴포넌트가 첫 로딩을 끝냈을 대 한 번만 실행되는 라이프 사이클 함수. 이 부분에서 대부분 DOM조작을 하거나 로딩 이후에 확인해야 하는 작업들을 수행함.
(이 메소드가 실행되는 시점은 이미 브라우저에 작성한 JSX가 HTML로 렌더링이 완료되어 있는 상태)

# componentDidUpdate
: state, props가 업데이트 될 때마다 실행되는 함수. componentDidUpdate는 componentDidMount와 같이 render메소드가 수행되고 브라우저에 HTML형태로 렌더링된 시점 이후에 동작하는 점은 같음.
그러나, componentDidUpdate는 state나 props가 업데이트 되었을 때에만 수행되며, 다른 부분은 같음.

# componentWillUnmount
: 컴포넌트에 할당해 놓았던 setInterval을 해제하는 등의 작업을 수행함.
