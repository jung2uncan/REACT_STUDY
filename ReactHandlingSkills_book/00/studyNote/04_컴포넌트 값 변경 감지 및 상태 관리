* useState 를 통해 컴포넌트에서 바뀌는 값 관리하기
 : 컴포넌트에서 동적인 값을 상태(state)라고 함. useState 함수를 이용하여 컴포넌트에서 상태 관리를 할 수 있음.

    예) 
    const [number, setNumber] = useState(0);    
    - useState를 사용할 때에는 상태의 기본값을 파라미터로 넣어서 호출함.
    - 이 함수를 호출하면 배열이 반환되는데 여기서, 첫번째 원소는 현재 상태, 두번째 원소는 Setter 함수를 반환 함.
    - 즉, [현재 상태, Setter 함수] 와 같이 반환함.


* Input
    - input의 onChange를 사용하면 이벤트 객체 e를 파라미터로 받아올 수 있다.
    - 이 객체의 e.target은 이벤트가 발생한 DOM을 가리킨다.
    - e.target.value를 조회하면 현재 input의 value값을 알 수 있다.

* Input값이 여러 개일 때 관리하는 방법
 : 리액트 상태에서 객체를 수정해야할 때에는 아래와 같이 직접 수정하면 안됨.
₩₩₩
inputs[name] = value;
₩₩₩

새로운 객체를 만들어서 새로운 객체에 변화를 주고, 이를 상태로 사용해야 함.
  예) 
  setInputs({
    ...inputs,
    [name]: value
  });

>> 여기서 ... 문법은 spread문법이다. 객체의 모든 내용을 '펼쳐서' 기존 객체를 복사하는 것이다. 기존 값을 그대로 복사 하며, 이를 "불변성을 지킨다" 라고 부른다. 불변성을 지켜주어야만 리액트 컴포넌트에서 상태가 업데이트가 됐음을 감지 할 수 있고 이에 따라 필요한 리렌더링이 진행된다.
참고 : https://learnjs.vlpt.us/useful/07-spread-and-rest.html

* ref?
: 리액트에서 가끔씩 DOM 접근이 필요한 경우가 있다. 이 때, 리액트에서 사용하는 것이 'ref'이다.
함수형 컴포넌트에서 ref를 사용할 때는 useRef라는 Hook함수를 사용한다.
클래스형 컴포넌트에서는 콜백 함수를 사용하거나 React.createRef 라는 함수를 사용한다.

