* useReducer 이해하기
 : 컴포넌트의 상태 업데이트 로직을 컴포넌트에서 분리시킬 수 있음. 
    상태 업데이트 로직을 컴포넌트 바깥에 작성할 수도 있고, 다른 파일에 작성 후 불러와서 사용도 가능함.

 * reducer란?
  : 현재 상태와 액션 객체를 파라미터로 받아와서 새로운 상태를 반환해주는 함수.
    reducer에서 반환하는 상태는 곧 컴포넌트가 지닐 새로운 상태가 됨.

```
//예시
function reducer(state, action) {
  // 새로운 상태를 만드는 로직
  // const nextState = ...
  return nextState;
}
```

action은 업데이트를 위한 정보를 포함하고 있으며, 주로 'type'값을 지닌 객체 형태로 사용하지만, 정해진 규칙은 아니다. 즉, 객체의 형태는 자유롭게 정의 가능함.


```
ex)
// 카운터에 1을 더하는 액션
{
  type: 'INCREMENT'
}
// 카운터에 1을 빼는 액션
{
  type: 'DECREMENT'
}
// input 값을 바꾸는 액션
{
  type: 'CHANGE_INPUT',
  key: 'email',
  value: 'test@react.com'
}
```

* useReducer의 사용 방법
    const [state, dispatch] = useReducer(reducer, initialState);

    1) state?
        : 앞으로 컴포넌트에서 사용할 수 있는 상태
    2) dispatch?
        : 액션을 발생시키는 함수. 사용 예) dispatch({ type: 'INCREMENT' })
    3) reducer?
        : userReducer에 넣는 첫 번째 파라미터 reducer '함수'
    4) initialState?
        : 초기 상태

* useReducer vs useState 뭘 써야할까?
 - useState 가 편한 경우
    : 컴포넌트에서 관리하는 값이 딱 하나고, 그 값이 단순한 숫자, 문자열 또는 boolean 값일 때.

        ex) const [value, setValue] = useState(true);

 - useReducer가 편한 경우
    : 컴포넌트에서 관리하는 값이 여러개가 되어서 상태의 구조가 복잡할 때

    