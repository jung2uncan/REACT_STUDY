1. 리액트의 시작

1.1 왜 리액트인가?
1.1.1 리액트의 이해
1.1.1.1 초기 렌더링 - render() {…}
: 컴포넌트가 어떻게 생겼는지 정의하는 역할을 함. 뷰가 어떻게 생겼고, 어떻게 작동하는지에 대한 정보를 지닌 객체를 반환한다.

1.1.1.2 조화 과정

- 컴포넌트는 데이터를 업데이트했을 때 단순히 업데이트한 값을 수정하는 것이 아닌, 새로운 데이터로 render 함수를 또 다시 호출한다.
- 이 때, render 함수가 반환하는 결과를 곧바로 DOM에 반영하는 것이 아님!
- 이전에 render 함수가 만들었던 컴포넌트 정보와 현재 render 함수가 만든 컴포넌트 정보를 비교하여, 둘의 차이를 알아내 최소한의 연산으로 DOM 트리를 업데이트 함!!

  1.2 리액트의 특징
  1.2.1 Virtual DOM
  1.2.1.1 DOM(Document Object Model)이란?

- 객체로 문서 구조를 표현하는 방법으로 XML이나, HTML로 작성함
- 웹 브라우저는 DOM을 활용하여 객체에 자바스크립트와 CSS를 적용함. (DOM은 트리형태라서 특정 노드를 찾거나, 원하는 곳에 수정/제거/삽입 등 모두 가능함)
  1.2.1.2 Virtual DOM

  - 실제 DOM에 접근하여 조작하는 대신, 이를 추상화한 자바스크립트 객체를 구성하여 사용함. (실제 DOM의 가벼운 사본과 비슷)
    - 리액트에서 데이터가 변하여 웹 브라우저에 실제 DOM을 업데이트할 때
      1. 데이터를 업데이트하면 전체 UI를 Virtual DOM에 리렌더링
      2. 이전 Virtual DOM에 있던 내용과 현재 내용을 비교
      3. 바뀐 부분만 실제 DOM에 적용

  1.2.2 기타 특징

  - 일부 웹 프레임워크가 MVC 또는 MVW 등 구조를 지향하는 것과 달리 리액트는 오로지 뷰만 담당함.
    “리액트는 프레임 워크가 아니라 라이브러리” 이다.
